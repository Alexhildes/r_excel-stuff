<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - Reformat and combine</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'Reformat and combine' query in the workbook.</o:Description>
  <o:Name>Query - Reformat and combine</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=Reformat and combine;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [Reformat and combine]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.62.5222.701&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;fr-FR&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;getParam&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (key as text) =&gt; let&#13;&#10;        Source = Excel.CurrentWorkbook(){[Name=&quot;config&quot;]}[Content],&#13;&#10;        #&quot;Filtered Rows&quot; = Table.SelectRows(Source, each [Key] = key),&#13;&#10;        Value = #&quot;Filtered Rows&quot;{0}[Value]&#13;&#10;    in&#13;&#10;        Value&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;Reformat and combine&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = Folder.Files(getParam(&quot;input directory&quot;)),&#13;&#10;    #&quot;Filtered Hidden Files1&quot; = Table.SelectRows(Source, each [Attributes]?[Hidden]? &lt;&gt; true),&#13;&#10;    #&quot;Filtered Rows&quot; = Table.SelectRows(#&quot;Filtered Hidden Files1&quot;, each not Text.StartsWith([Name], &quot;~&quot;)),&#13;&#10;    #&quot;Sorted Rows&quot; = Table.Sort(#&quot;Filtered Rows&quot;,{{&quot;Name&quot;, Order.Ascending}}),&#13;&#10;    #&quot;Removed Other Columns&quot; = Table.SelectColumns(#&quot;Sorted Rows&quot;,{&quot;Name&quot;, &quot;Content&quot;}),&#13;&#10;    #&quot;Invoked Custom Function&quot; = Table.AddColumn(#&quot;Removed Other Columns&quot;, &quot;parseFile&quot;, each parseFile([Content])),&#13;&#10;    #&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Invoked Custom Function&quot;,{&quot;Content&quot;}),&#13;&#10;    #&quot;Expanded parseFile&quot; = Table.ExpandTableColumn(#&quot;Removed Columns&quot;, &quot;parseFile&quot;, Table.ColumnNames(#&quot;Removed Columns&quot;[parseFile]{0}))&#13;&#10;in&#13;&#10;    #&quot;Expanded parseFile&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;RemoveEmptyColumns&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (tbl as any, additionalColumns as any) =&gt; let&#13;&#10;    Source = tbl,&#13;&#10;    columnNames = Table.ColumnNames(Source),&#13;&#10;    emptyColumns = List.Accumulate({0..List.Count(columnNames)-1},{},(state,current)=&gt;&#13;&#10;        if List.Distinct(Table.Column(Source,columnNames{current}))={null} then List.Combine({state,{columnNames{current}}}) else state),&#13;&#10;    #&quot;Removed Columns&quot; = Table.RemoveColumns(Source,emptyColumns),&#13;&#10;        #&quot;Removed Columns1&quot; = if List.IsEmpty(additionalColumns) then #&quot;Removed Columns&quot; else Table.RemoveColumns(#&quot;Removed Columns&quot;,additionalColumns)&#13;&#10;in&#13;&#10;    #&quot;Removed Columns1&quot;&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;allNulls&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (record as any) =&gt; let&#13;&#10;    Source = record,&#13;&#10;    Custom2 = (List.Accumulate({0..Record.FieldCount(Source)-1},&quot;&quot;,(state,current)=&gt;state&amp;(if Record.FieldValues(Source){current}=null then &quot;&quot; else if Text.From(Record.FieldValues(Source){current})=&quot;&quot; then &quot;blank&quot; else Text.From(Record.FieldValues(Source){current}))))=&quot;&quot;&#13;&#10;in&#13;&#10;    Custom2&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;ReformatBlock&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (blocks as any, blockNum as any, rowsToRemove as any, itemColumn as any) =&gt; let&#13;&#10;    Source = blocks,&#13;&#10;    #&quot;2. all&quot; = RemoveEmptyColumns(Source{blockNum}[all], {&quot;Block&quot;}),&#13;&#10;    #&quot;2. Removed Top Rows&quot; = Table.Skip(#&quot;2. all&quot;,rowsToRemove),&#13;&#10;    #&quot;2. Promoted Headers&quot; = Table.PromoteHeaders(#&quot;2. Removed Top Rows&quot;, [PromoteAllScalars=true]),&#13;&#10;// If there is an Item column, don't do anything. If not, add one&#13;&#10;        #&quot;2. Added Custom&quot; = if List.Contains(Table.ColumnNames(#&quot;2. Promoted Headers&quot;),itemColumn) then Table.RenameColumns(#&quot;2. Promoted Headers&quot;,{{itemColumn, &quot;Item&quot;}}) else Table.AddColumn(#&quot;2. Promoted Headers&quot;, &quot;Item&quot;, each null),&#13;&#10;    #&quot;2. Reordered Columns&quot; = Table.ReorderColumns(#&quot;2. Added Custom&quot;,List.Combine({{&quot;Item&quot;},List.RemoveItems(Table.ColumnNames(#&quot;2. Added Custom&quot;),{&quot;Item&quot;})}))&#13;&#10;in&#13;&#10;    #&quot;2. Reordered Columns&quot;&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;parseFile&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (#&quot;Sample File Parameter1&quot; as binary) =&gt; let&#13;&#10;    Source = Excel.Workbook(#&quot;Sample File Parameter1&quot;, null, true),&#13;&#10;    #&quot;Data Input (Daily)_Sheet&quot; = Source{[Item=&quot;Data Input (Daily)&quot;,Kind=&quot;Sheet&quot;]}[Data],&#13;&#10;    #&quot;Removed Columns&quot; = RemoveEmptyColumns(#&quot;Data Input (Daily)_Sheet&quot;,{}),&#13;&#10;    #&quot;Identified all-null records&quot; = Table.AddColumn(#&quot;Removed Columns&quot;, &quot;allNulls&quot;, each allNulls(_)),&#13;&#10;    #&quot;Added Index&quot; = Table.AddIndexColumn(#&quot;Identified all-null records&quot;, &quot;Index&quot;, 0, 1),&#13;&#10;    #&quot;Added Custom&quot; = Table.AddColumn(#&quot;Added Index&quot;, &quot;Block&quot;, each &#13;&#10;        if &#13;&#10;            [allNulls] = true &#13;&#10;        then &#13;&#10;            -1 &#13;&#10;        else &#13;&#10;            if &#13;&#10;                [Index]=0 &#13;&#10;            then &#13;&#10;                0 &#13;&#10;            else &#13;&#10;                if &#13;&#10;                    #&quot;Added Index&quot;[allNulls]{[Index]-1} = false &#13;&#10;                then &#13;&#10;                    null &#13;&#10;                else &#13;&#10;                    [Index]&#13;&#10;        ),&#13;&#10;    #&quot;Filled Down&quot; = Table.FillDown(#&quot;Added Custom&quot;,{&quot;Block&quot;}),&#13;&#10;    #&quot;Filtered Rows&quot; = Table.SelectRows(#&quot;Filled Down&quot;, each ([Block] &lt;&gt; -1)),&#13;&#10;    #&quot;Removed Columns2&quot; = Table.RemoveColumns(#&quot;Filtered Rows&quot;,{&quot;allNulls&quot;, &quot;Index&quot;}),&#13;&#10;    #&quot;Grouped Rows&quot; = Table.Group(#&quot;Removed Columns2&quot;, {&quot;Block&quot;}, {{&quot;all&quot;, each _, type table}}),&#13;&#10;    #&quot;Keep tables only&quot; = Table.SelectColumns(#&quot;Grouped Rows&quot;,{&quot;all&quot;}),&#13;&#10;    BLOCKS = #&quot;Keep tables only&quot;,&#13;&#10;&#13;&#10;    // BLOCK 1&#13;&#10;    Source1 = ReformatBlock(BLOCKS,0,0,&quot;Column1&quot;),&#13;&#10;&#13;&#10;    // BLOCK 1 - PART1&#13;&#10;    #&quot;BLOCK1 PART1&quot; = Table.RemoveColumns(Source1,List.LastN(Table.ColumnNames(Source1),5)),&#13;&#10;&#13;&#10;    // BLOCK 1 - PART2&#13;&#10;    #&quot;BLOCK1 PART2.1&quot; = Table.RemoveColumns(Source1,List.FirstN(Table.ColumnNames(Source1),5)),&#13;&#10;        #&quot;BLOCK1 PART2.2&quot; = Table.AddColumn(#&quot;BLOCK1 PART2.1&quot;, &quot;A HIGHLY UNLIKELY COLUMN NAME&quot;, each Record.FieldValues(_){0}),&#13;&#10;    #&quot;BLOCK1 PART2.3&quot; = Table.SelectRows(#&quot;BLOCK1 PART2.2&quot;, each [A HIGHLY UNLIKELY COLUMN NAME] &lt;&gt; null),&#13;&#10;        #&quot;BLOCK1 PART2.4&quot; = Table.RemoveColumns(#&quot;BLOCK1 PART2.3&quot;,{&quot;A HIGHLY UNLIKELY COLUMN NAME&quot;}),&#13;&#10;    #&quot;BLOCK1 PART2&quot; = Table.AddColumn(#&quot;BLOCK1 PART2.4&quot;, &quot;Item&quot;, each null),&#13;&#10;    BLOCK1 = Table.Combine({#&quot;BLOCK1 PART1&quot;,#&quot;BLOCK1 PART2&quot;}),&#13;&#10;    BLOCK2 = ReformatBlock(BLOCKS,1,1,&quot;Column1&quot;),&#13;&#10;    BLOCK3 = ReformatBlock(BLOCKS,2,1,&quot;Column1&quot;),&#13;&#10;    BLOCK4 = ReformatBlock(BLOCKS,3,0,&quot;Column1&quot;),&#13;&#10;    BLOCK5 = ReformatBlock(BLOCKS,4,0,&quot;Column1&quot;),&#13;&#10;    BLOCK6 = ReformatBlock(BLOCKS,5,0,&quot;Column1&quot;),&#13;&#10;    BLOCKS123 = Table.Combine({BLOCK1,BLOCK2,BLOCK3}),&#13;&#10;    BLOCKS45.1 = Table.NestedJoin(BLOCK4,{&quot;Item&quot;},BLOCK5,{&quot;Item&quot;},&quot;Block5&quot;,JoinKind.FullOuter),&#13;&#10;    BLOCKS45.2 = Table.RenameColumns(BLOCKS45.1,{{&quot;Item&quot;, &quot;Item.0&quot;}}),&#13;&#10;    BLOCKS45.3 = Table.ExpandTableColumn(BLOCKS45.2, &quot;Block5&quot;, Table.ColumnNames(BLOCK5)),&#13;&#10;    BLOCKS45.4 = Table.AddColumn(BLOCKS45.3, &quot;Item.2&quot;, each if [Item.0] = null then [Item] else [Item.0]),&#13;&#10;    BLOCKS45.5 = Table.RemoveColumns(BLOCKS45.4,{&quot;Item.0&quot;, &quot;Item&quot;}),&#13;&#10;    BLOCKS456.1 = Table.NestedJoin(BLOCKS45.5,{&quot;Item.2&quot;},BLOCK6,{&quot;Item&quot;},&quot;Block6&quot;,JoinKind.FullOuter),&#13;&#10;    BLOCKS456.2 = Table.ExpandTableColumn(BLOCKS456.1, &quot;Block6&quot;, Table.ColumnNames(BLOCK6)),&#13;&#10;        BLOCKS456.3 = Table.RenameColumns(BLOCKS456.2,{{&quot;Item&quot;, &quot;Item.1&quot;}}),&#13;&#10;    BLOCKS456.4 = Table.AddColumn(BLOCKS456.3, &quot;Item&quot;, each if [Item.2] = null then [Item.1] else [Item.2]),&#13;&#10;    BLOCKS456 = Table.RemoveColumns(BLOCKS456.4,{&quot;Item.1&quot;, &quot;Item.2&quot;}),&#13;&#10;    Custom1 = Table.Combine({BLOCKS123,BLOCKS456})&#13;&#10;    in&#13;&#10;        Custom1&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
